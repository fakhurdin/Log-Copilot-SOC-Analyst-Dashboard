import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { AnalysisResult } from '@/types/log';
import { 
  Download, 
  FileText, 
  PenTool,
  Calendar,
  Clock,
  CheckCircle,
  AlertTriangle
} from 'lucide-react';
import jsPDF from 'jspdf';
import { toast } from '@/hooks/use-toast';

interface ExportTabProps {
  analysisResult: AnalysisResult | null;
}

export function ExportTab({ analysisResult }: ExportTabProps) {
  const [isExporting, setIsExporting] = useState(false);

  const generateMarkdownReport = (): string => {
    if (!analysisResult) return '';

    const formatDate = (date: Date) => date.toLocaleDateString() + ' ' + date.toLocaleTimeString();

    return `# Log Copilot Analysis Report

## Executive Summary
${analysisResult.summary}

## Analysis Overview
- **Total Logs Analyzed**: ${analysisResult.totalLogs.toLocaleString()}
- **Anomalies Detected**: ${analysisResult.anomalies.length}
- **IOCs Extracted**: ${analysisResult.iocs.length}
- **MITRE Techniques**: ${Object.keys(analysisResult.mitreMapping).length}
- **Analysis Period**: ${formatDate(analysisResult.timeRange.start)} - ${formatDate(analysisResult.timeRange.end)}

## Key Findings

### Anomalies
${analysisResult.anomalies.length > 0 ? 
  analysisResult.anomalies.slice(0, 10).map((anomaly, index) => 
    `${index + 1}. **${formatDate(anomaly.timestamp)}** - ${anomaly.event_type} (Score: ${anomaly.anomaly_score?.toFixed(2)})`
  ).join('\n') : 
  'No significant anomalies detected.'
}

### Indicators of Compromise (IOCs)
${analysisResult.iocs.length > 0 ?
  analysisResult.iocs.map(ioc => 
    `- **${ioc.type.toUpperCase()}**: \`${ioc.value}\` (Confidence: ${(ioc.confidence * 100).toFixed(0)}%)`
  ).join('\n') :
  'No IOCs extracted.'
}

### MITRE ATT&CK Mapping
${Object.keys(analysisResult.mitreMapping).length > 0 ?
  Object.entries(analysisResult.mitreMapping)
    .sort(([,a], [,b]) => b - a)
    .map(([technique, count]) => `- **${technique}**: ${count} detections`)
    .join('\n') :
  'No MITRE techniques mapped.'
}

## Recommendations

### Immediate Actions
1. Review high-confidence IOCs for threat hunting
2. Investigate anomalies during unusual hours
3. Validate MITRE technique detections

### Long-term Improvements
1. Enhance monitoring for detected attack patterns
2. Update detection rules based on findings
3. Improve log collection coverage

---
*Report generated by Log Copilot on ${new Date().toLocaleString()}*
*All analysis performed client-side for maximum privacy*
`;
  };

  const exportToMarkdown = () => {
    if (!analysisResult) return;

    const markdown = generateMarkdownReport();
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `log-copilot-report-${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report exported",
      description: "Markdown report downloaded successfully",
    });
  };

  const exportToPDF = async () => {
    if (!analysisResult) return;

    setIsExporting(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      let yPosition = margin;

      // Helper function to add text with wrapping
      const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
        pdf.setFontSize(fontSize);
        if (isBold) pdf.setFont(undefined, 'bold');
        else pdf.setFont(undefined, 'normal');
        
        const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        pdf.text(lines, margin, yPosition);
        yPosition += lines.length * (fontSize * 0.6);
        
        if (yPosition > pdf.internal.pageSize.getHeight() - margin) {
          pdf.addPage();
          yPosition = margin;
        }
      };

      // Title
      addText('Log Copilot Analysis Report', 20, true);
      yPosition += 10;

      // Executive Summary
      addText('Executive Summary', 16, true);
      yPosition += 5;
      addText(analysisResult.summary);
      yPosition += 10;

      // Analysis Overview
      addText('Analysis Overview', 16, true);
      yPosition += 5;
      addText(`Total Logs Analyzed: ${analysisResult.totalLogs.toLocaleString()}`);
      addText(`Anomalies Detected: ${analysisResult.anomalies.length}`);
      addText(`IOCs Extracted: ${analysisResult.iocs.length}`);
      addText(`MITRE Techniques: ${Object.keys(analysisResult.mitreMapping).length}`);
      addText(`Analysis Period: ${analysisResult.timeRange.start.toLocaleDateString()} - ${analysisResult.timeRange.end.toLocaleDateString()}`);
      yPosition += 10;

      // Key Findings
      addText('Key Findings', 16, true);
      yPosition += 5;

      // Anomalies
      addText('Anomalies', 14, true);
      if (analysisResult.anomalies.length > 0) {
        analysisResult.anomalies.slice(0, 10).forEach((anomaly, index) => {
          addText(`${index + 1}. ${anomaly.timestamp.toLocaleString()} - ${anomaly.event_type} (Score: ${anomaly.anomaly_score?.toFixed(2) || 'N/A'})`);
        });
      } else {
        addText('No significant anomalies detected.');
      }
      yPosition += 5;

      // IOCs
      addText('Indicators of Compromise (IOCs)', 14, true);
      if (analysisResult.iocs.length > 0) {
        analysisResult.iocs.forEach(ioc => {
          addText(`${ioc.type.toUpperCase()}: ${ioc.value} (Confidence: ${(ioc.confidence * 100).toFixed(0)}%)`);
        });
      } else {
        addText('No IOCs extracted.');
      }
      yPosition += 5;

      // MITRE ATT&CK
      addText('MITRE ATT&CK Mapping', 14, true);
      if (Object.keys(analysisResult.mitreMapping).length > 0) {
        Object.entries(analysisResult.mitreMapping)
          .sort(([,a], [,b]) => b - a)
          .forEach(([technique, count]) => {
            addText(`${technique}: ${count} detections`);
          });
      } else {
        addText('No MITRE techniques mapped.');
      }

      // Footer
      pdf.setFontSize(10);
      pdf.text(`Report generated by Log Copilot on ${new Date().toLocaleString()}`, margin, pdf.internal.pageSize.getHeight() - 10);

      pdf.save(`log-copilot-report-${new Date().toISOString().split('T')[0]}.pdf`);

      toast({
        title: "PDF exported",
        description: "PDF report downloaded successfully",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "Failed to generate PDF report",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportIOCs = () => {
    if (!analysisResult || analysisResult.iocs.length === 0) return;

    const iocText = analysisResult.iocs.map(ioc => 
      `${ioc.type.toUpperCase()}: ${ioc.value}`
    ).join('\n');

    const blob = new Blob([iocText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `iocs-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "IOCs exported",
      description: `${analysisResult.iocs.length} IOCs exported successfully`,
    });
  };

  if (!analysisResult) {
    return (
      <div className="space-y-6">
        <Card className="p-8 text-center">
          <div className="flex items-center justify-center w-16 h-16 mx-auto rounded-full bg-muted/30 mb-4">
            <Download className="w-8 h-8 text-muted-foreground" />
          </div>
          <h3 className="text-xl font-semibold text-foreground mb-2">
            No Data to Export
          </h3>
          <p className="text-muted-foreground">
            Complete an analysis to generate exportable reports.
          </p>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Report Summary */}
      <Card className="p-6">
        <div className="flex items-center gap-3 mb-4">
          <PenTool className="w-5 h-5 text-accent" />
          <h3 className="text-lg font-semibold text-foreground">Report Summary</h3>
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="text-center">
            <div className="text-2xl font-bold text-foreground">{analysisResult.totalLogs.toLocaleString()}</div>
            <div className="text-sm text-muted-foreground">Total Logs</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-foreground">{analysisResult.anomalies.length}</div>
            <div className="text-sm text-muted-foreground">Anomalies</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-foreground">{analysisResult.iocs.length}</div>
            <div className="text-sm text-muted-foreground">IOCs</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-foreground">{Object.keys(analysisResult.mitreMapping).length}</div>
            <div className="text-sm text-muted-foreground">MITRE Techniques</div>
          </div>
        </div>

        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Calendar className="w-4 h-4" />
          <span>
            Analysis Period: {analysisResult.timeRange.start.toLocaleDateString()} - {analysisResult.timeRange.end.toLocaleDateString()}
          </span>
        </div>
      </Card>

      {/* Export Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Full Report Export */}
        <Card className="p-6">
          <div className="flex items-center gap-3 mb-4">
            <FileText className="w-5 h-5 text-primary" />
            <h3 className="text-lg font-semibold text-foreground">Full Analysis Report</h3>
          </div>
          
          <p className="text-sm text-muted-foreground mb-6">
            Export a comprehensive report including all findings, IOCs, anomalies, and MITRE ATT&CK mappings.
          </p>

          <div className="space-y-3">
            <Button 
              onClick={exportToMarkdown}
              className="w-full justify-start"
              variant="outline"
            >
              <FileText className="w-4 h-4 mr-2" />
              Export as Markdown
              <Badge variant="secondary" className="ml-auto">
                .md
              </Badge>
            </Button>
            
            <Button 
              onClick={exportToPDF}
              disabled={isExporting}
              className="w-full justify-start"
              variant="outline"
            >
              <Download className="w-4 h-4 mr-2" />
              {isExporting ? 'Generating PDF...' : 'Export as PDF'}
              <Badge variant="secondary" className="ml-auto">
                .pdf
              </Badge>
            </Button>
          </div>
        </Card>

        {/* IOC Export */}
        <Card className="p-6">
          <div className="flex items-center gap-3 mb-4">
            <AlertTriangle className="w-5 h-5 text-warning" />
            <h3 className="text-lg font-semibold text-foreground">IOC Export</h3>
          </div>
          
          <p className="text-sm text-muted-foreground mb-6">
            Export just the Indicators of Compromise for threat hunting and SIEM integration.
          </p>

          <Button 
            onClick={exportIOCs}
            disabled={analysisResult.iocs.length === 0}
            className="w-full justify-start"
            variant="outline"
          >
            <Download className="w-4 h-4 mr-2" />
            Export IOCs
            <Badge variant="secondary" className="ml-auto">
              {analysisResult.iocs.length} items
            </Badge>
          </Button>
        </Card>
      </div>

      {/* Export Preview */}
      <Card className="p-6">
        <div className="flex items-center gap-3 mb-4">
          <CheckCircle className="w-5 h-5 text-accent" />
          <h3 className="text-lg font-semibold text-foreground">Report Preview</h3>
        </div>
        
        <div className="bg-muted/20 rounded-lg p-4 font-mono text-sm space-y-2">
          <div className="text-foreground font-bold"># Log Copilot Analysis Report</div>
          <div className="text-muted-foreground">## Executive Summary</div>
          <div className="text-muted-foreground">{analysisResult.summary.slice(0, 100)}...</div>
          <div className="text-muted-foreground">## Analysis Overview</div>
          <div className="text-muted-foreground">- Total Logs Analyzed: {analysisResult.totalLogs.toLocaleString()}</div>
          <div className="text-muted-foreground">- Anomalies Detected: {analysisResult.anomalies.length}</div>
          <div className="text-muted-foreground">- IOCs Extracted: {analysisResult.iocs.length}</div>
          <div className="text-muted-foreground">...</div>
        </div>
      </Card>

      {/* Privacy Notice */}
      <Card className="p-4 border-accent/20 bg-accent/5">
        <div className="flex items-start gap-3">
          <CheckCircle className="w-5 h-5 text-accent mt-0.5" />
          <div>
            <h4 className="font-semibold text-foreground mb-1">Privacy Guaranteed</h4>
            <p className="text-sm text-muted-foreground">
              All reports are generated locally in your browser. No data is transmitted to any server during the export process.
            </p>
          </div>
        </div>
      </Card>
    </div>
  );
}